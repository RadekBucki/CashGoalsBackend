extend type Query {
    user: User!
}

extend type Mutation {
    login(email: String!, password: String!): AuthorizationOutput!
    refreshToken(token: String!): AuthorizationOutput!
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    activateUser(email: String!, token: String!): Boolean!
    requestPasswordReset(email: String!, resetUrl: String!): Boolean!
    resetPassword(email: String!, token: String!, password: String!): Boolean!
}

type User {
    name: String!
    email: String!
    theme: Theme!
    locale: String!
}

type AuthorizationOutput {
    accessToken: String!
    refreshToken: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    theme: Theme!
    activationUrl: String!
}

input UpdateUserInput {
    name: String!
    email: String!
    theme: Theme!
    locale: String!
    password: String!
}

enum Theme {
    LIGHT
    DARK,
    SYSTEM
}